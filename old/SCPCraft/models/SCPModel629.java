package SCPCraft.models;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class SCPModel629 extends ModelBase
{
	//fields
	ModelRenderer backhead;
	ModelRenderer body;
	ModelRenderer shoulderleft;
	ModelRenderer shoulderright;
	ModelRenderer brassdick;
	ModelRenderer neck;
	ModelRenderer skeleton;
	ModelRenderer brasspipe;
	ModelRenderer leftleg;
	ModelRenderer rightleg;
	ModelRenderer leftfoot;
	ModelRenderer rightfoot;
	ModelRenderer eye1;
	ModelRenderer eye2;
	ModelRenderer armleft;
	ModelRenderer armright;
	ModelRenderer wrenchleft;
	ModelRenderer wrenchleft2;
	ModelRenderer wrenchright;
	ModelRenderer wrenchright2;
	ModelRenderer nose;
	ModelRenderer mouthpipe;
	ModelRenderer mouth;
	ModelRenderer eyepipe1;
	ModelRenderer eyepipe2;
	ModelRenderer plate1;
	public boolean Armed;

	public SCPModel629()
	{
		Armed = false;
		textureWidth = 64;
		textureHeight = 64;

		backhead = new ModelRenderer(this, 25, 5);
		backhead.addBox(-3F, -6F, 2F, 6, 6, 1);
		backhead.setRotationPoint(0F, 3F, 0F);
		backhead.setTextureSize(64, 64);
		backhead.mirror = true;
		setRotation(backhead, 0.122173F, 0F, 0F);
		body = new ModelRenderer(this, 21, 21);
		body.addBox(-2F, 4F, -3F, 4, 7, 6);
		body.setRotationPoint(0F, 3F, 0F);
		body.setTextureSize(64, 64);
		body.mirror = true;
		setRotation(body, 0.0349066F, 0F, 0F);
		shoulderleft = new ModelRenderer(this, 14, 21);
		shoulderleft.addBox(-1F, -1F, -1F, 1, 2, 2);
		shoulderleft.setRotationPoint(-2F, 10F, 0F);
		shoulderleft.setTextureSize(64, 64);
		shoulderleft.mirror = true;
		setRotation(shoulderleft, 0F, 0F, 0F);
		shoulderright = new ModelRenderer(this, 42, 21);
		shoulderright.addBox(0F, -1F, -1F, 1, 2, 2);
		shoulderright.setRotationPoint(2F, 10F, 0F);
		shoulderright.setTextureSize(64, 64);
		shoulderright.mirror = true;
		setRotation(shoulderright, 0F, 0F, 0F);
		brassdick = new ModelRenderer(this, 25, 35);
		brassdick.addBox(-1F, 11F, -2F, 2, 1, 4);
		brassdick.setRotationPoint(0F, 3F, 0F);
		brassdick.setTextureSize(64, 64);
		brassdick.mirror = true;
		setRotation(brassdick, 0F, 0F, 0F);
		neck = new ModelRenderer(this, 29, 13);
		neck.addBox(-1F, -2F, 1F, 2, 6, 1);
		neck.setRotationPoint(0F, 3F, 0F);
		neck.setTextureSize(64, 64);
		neck.mirror = true;
		setRotation(neck, 0F, 0F, 0F);
		skeleton = new ModelRenderer(this, 23, 0);
		skeleton.addBox(-3F, -6F, -1F, 6, 1, 3);
		skeleton.setRotationPoint(0F, 3F, 0F);
		skeleton.setTextureSize(64, 64);
		skeleton.mirror = true;
		setRotation(skeleton, 0.122173F, 0F, 0F);
		brasspipe = new ModelRenderer(this, 27, 41);
		brasspipe.addBox(-1F, 12F, -1F, 2, 3, 2);
		brasspipe.setRotationPoint(0F, 3F, 0F);
		brasspipe.setTextureSize(64, 64);
		brasspipe.mirror = true;
		setRotation(brasspipe, 0F, 0F, 0F);
		leftleg = new ModelRenderer(this, 18, 44);
		leftleg.addBox(-2F, 0F, -1F, 2, 2, 2);
		leftleg.setRotationPoint(-1F, 17F, 0F);
		leftleg.setTextureSize(64, 64);
		leftleg.mirror = true;
		setRotation(leftleg, -0.715585F, 0F, 0F);
		rightleg = new ModelRenderer(this, 36, 44);
		rightleg.addBox(0F, 0F, -1F, 2, 2, 2);
		rightleg.setRotationPoint(1F, 17F, 0F);
		rightleg.setTextureSize(64, 64);
		rightleg.mirror = true;
		setRotation(rightleg, -0.715585F, 0F, 0F);
		leftfoot = new ModelRenderer(this, 18, 49);
		leftfoot.addBox(-2F, 2F, -2.5F, 2, 5, 2);
		leftfoot.setRotationPoint(-1F, 17F, 0F);
		leftfoot.setTextureSize(64, 64);
		leftfoot.mirror = true;
		setRotation(leftfoot, 0F, 0F, 0F);
		rightfoot = new ModelRenderer(this, 36, 49);
		rightfoot.addBox(0F, 2F, -2.5F, 2, 5, 2);
		rightfoot.setRotationPoint(1F, 17F, 0F);
		rightfoot.setTextureSize(64, 64);
		rightfoot.mirror = true;
		setRotation(rightfoot, 0F, 0F, 0F);
		eye1 = new ModelRenderer(this, 10, 46);
		eye1.addBox(-3F, -4F, -3F, 2, 2, 1);
		eye1.setRotationPoint(0F, 3F, 0F);
		eye1.setTextureSize(64, 64);
		eye1.mirror = true;
		setRotation(eye1, 0F, 0F, 0F);
		eye2 = new ModelRenderer(this, 47, 45);
		eye2.addBox(1F, -4F, -3F, 2, 2, 1);
		eye2.setRotationPoint(0F, 3F, 0F);
		eye2.setTextureSize(64, 64);
		eye2.mirror = true;
		setRotation(eye2, 0F, 0F, 0F);
		armleft = new ModelRenderer(this, 14, 26);
		armleft.addBox(-2F, 0F, -1F, 1, 6, 2);
		armleft.setRotationPoint(-2F, 10F, 0F);
		armleft.setTextureSize(64, 64);
		armleft.mirror = true;
		setRotation(armleft, 0F, 0F, 0F);
		armright = new ModelRenderer(this, 42, 26);
		armright.addBox(1F, 0F, -1F, 1, 6, 2);
		armright.setRotationPoint(2F, 10F, 0F);
		armright.setTextureSize(64, 64);
		armright.mirror = true;
		setRotation(armright, 0F, 0F, 0F);
		wrenchleft = new ModelRenderer(this, 9, 28);
		wrenchleft.addBox(-2F, 5F, -2F, 1, 2, 1);
		wrenchleft.setRotationPoint(-2F, 10F, 0F);
		wrenchleft.setTextureSize(64, 64);
		wrenchleft.mirror = true;
		setRotation(wrenchleft, 0F, 0F, 0F);
		wrenchleft2 = new ModelRenderer(this, 9, 28);
		wrenchleft2.addBox(-2F, 5F, 1F, 1, 2, 1);
		wrenchleft2.setRotationPoint(-2F, 10F, 0F);
		wrenchleft2.setTextureSize(64, 64);
		wrenchleft2.mirror = true;
		setRotation(wrenchleft2, 0F, 0F, 0F);
		wrenchright = new ModelRenderer(this, 9, 28);
		wrenchright.addBox(1F, 5F, -2F, 1, 2, 1);
		wrenchright.setRotationPoint(2F, 10F, 0F);
		wrenchright.setTextureSize(64, 64);
		wrenchright.mirror = true;
		setRotation(wrenchright, 0F, 0F, 0F);
		wrenchright2 = new ModelRenderer(this, 9, 28);
		wrenchright2.addBox(1F, 5F, 1F, 1, 2, 1);
		wrenchright2.setRotationPoint(2F, 10F, 0F);
		wrenchright2.setTextureSize(64, 64);
		wrenchright2.mirror = true;
		setRotation(wrenchright2, 0F, 0F, 0F);
		nose = new ModelRenderer(this, 1, 50);
		nose.addBox(-1F, -2F, -3F, 2, 1, 4);
		nose.setRotationPoint(0F, 3F, 0F);
		nose.setTextureSize(64, 64);
		nose.mirror = true;
		setRotation(nose, 0F, 0F, 0F);
		mouthpipe = new ModelRenderer(this, 1, 14);
		mouthpipe.addBox(-1F, 0F, -2F, 2, 1, 3);
		mouthpipe.setRotationPoint(0F, 3F, 0F);
		mouthpipe.setTextureSize(64, 64);
		mouthpipe.mirror = true;
		setRotation(mouthpipe, 0F, 0F, 0F);
		mouth = new ModelRenderer(this, 1, 56);
		mouth.addBox(-1F, 0F, -3F, 2, 2, 1);
		mouth.setRotationPoint(0F, 3F, 0F);
		mouth.setTextureSize(64, 64);
		mouth.mirror = true;
		setRotation(mouth, 0F, 0F, 0F);
		eyepipe1 = new ModelRenderer(this, 1, 45);
		eyepipe1.addBox(-2F, -3F, -2F, 1, 1, 3);
		eyepipe1.setRotationPoint(0F, 3F, 0F);
		eyepipe1.setTextureSize(64, 64);
		eyepipe1.mirror = true;
		setRotation(eyepipe1, 0F, 0F, 0F);
		eyepipe2 = new ModelRenderer(this, 54, 44);
		eyepipe2.addBox(1F, -3F, -2F, 1, 1, 3);
		eyepipe2.setRotationPoint(0F, 3F, 0F);
		eyepipe2.setTextureSize(64, 64);
		eyepipe2.mirror = true;
		setRotation(eyepipe2, 0F, 0F, 0F);
		plate1 = new ModelRenderer(this, 1, 9);
		plate1.addBox(-1F, -1F, -2F, 2, 1, 3);
		plate1.setRotationPoint(0F, 3F, 0F);
		plate1.setTextureSize(64, 64);
		plate1.mirror = true;
		setRotation(plate1, 0F, 0F, 0F);
	}

	public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
	{
		super.render(entity, f, f1, f2, f3, f4, f5);
		setRotationAngles(f, f1, f2, f3, f4, f5, entity);
		backhead.render(f5);
		body.render(f5);
		shoulderleft.render(f5);
		shoulderright.render(f5);
		brassdick.render(f5);
		neck.render(f5);
		skeleton.render(f5);
		brasspipe.render(f5);
		leftleg.render(f5);
		rightleg.render(f5);
		leftfoot.render(f5);
		rightfoot.render(f5);
		eye1.render(f5);
		eye2.render(f5);
		armleft.render(f5);
		armright.render(f5);
		wrenchleft.render(f5);
		wrenchleft2.render(f5);
		wrenchright.render(f5);
		wrenchright2.render(f5);
		nose.render(f5);
		mouthpipe.render(f5);
		mouth.render(f5);
		eyepipe1.render(f5);
		eyepipe2.render(f5);
		plate1.render(f5);
	}

	private void setRotation(ModelRenderer model, float x, float y, float z)
	{
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}

	public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity)
	{
		super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);

		backhead.rotateAngleY = f3 / (180F / (float)Math.PI);
		backhead.rotateAngleX = f4 / (180F / (float)Math.PI);
		mouth.rotateAngleY = f3 / (180F / (float)Math.PI);
		mouth.rotateAngleX = f4 / (180F / (float)Math.PI);
		eyepipe1.rotateAngleY = f3 / (180F / (float)Math.PI);
		eyepipe1.rotateAngleX = f4 / (180F / (float)Math.PI);
		eyepipe2.rotateAngleY = f3 / (180F / (float)Math.PI);
		eyepipe2.rotateAngleX = f4 / (180F / (float)Math.PI);
		plate1.rotateAngleY = f3 / (180F / (float)Math.PI);
		plate1.rotateAngleX = f4 / (180F / (float)Math.PI);
		nose.rotateAngleY = f3 / (180F / (float)Math.PI);
		nose.rotateAngleX = f4 / (180F / (float)Math.PI);
		mouthpipe.rotateAngleY = f3 / (180F / (float)Math.PI);
		mouthpipe.rotateAngleX = f4 / (180F / (float)Math.PI);
		eye1.rotateAngleY = f3 / (180F / (float)Math.PI);
		eye1.rotateAngleX = f4 / (180F / (float)Math.PI);
		eye2.rotateAngleY = f3 / (180F / (float)Math.PI);
		eye2.rotateAngleX = f4 / (180F / (float)Math.PI);
		skeleton.rotateAngleY = f3 / (180F / (float)Math.PI);
		skeleton.rotateAngleX = f4 / (180F / (float)Math.PI);

		rightleg.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;
		leftleg.rotateAngleX = MathHelper.cos(f * 0.6662F + (float)Math.PI) * 1.4F * f1;
		rightleg.rotateAngleY = 0.0F;
		leftleg.rotateAngleY = 0.0F;  
		rightfoot.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;
		leftfoot.rotateAngleX = MathHelper.cos(f * 0.6662F + (float)Math.PI) * 1.4F * f1;
		rightfoot.rotateAngleY = 0.0F;
		leftfoot.rotateAngleY = 0.0F;

		armright.rotateAngleX = MathHelper.cos(f * 0.6662F + (float)Math.PI) * 2.0F * f1 * 0.5F;
		armleft.rotateAngleX = MathHelper.cos(f * 0.6662F) * 2.0F * f1 * 0.5F;
		armright.rotateAngleZ = 0.0F;
		armleft.rotateAngleZ = 0.0F;
		wrenchright.rotateAngleX = MathHelper.cos(f * 0.6662F + (float)Math.PI) * 2.0F * f1 * 0.5F;
		wrenchleft.rotateAngleX = MathHelper.cos(f * 0.6662F) * 2.0F * f1 * 0.5F;
		wrenchright.rotateAngleZ = 0.0F;
		wrenchleft.rotateAngleZ = 0.0F;
		wrenchright2.rotateAngleX = MathHelper.cos(f * 0.6662F + (float)Math.PI) * 2.0F * f1 * 0.5F;
		wrenchleft2.rotateAngleX = MathHelper.cos(f * 0.6662F) * 2.0F * f1 * 0.5F;
		wrenchright2.rotateAngleZ = 0.0F;
		wrenchleft2.rotateAngleZ = 0.0F;
	}

}
